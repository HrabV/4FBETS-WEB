// <auto-generated />
using System;
using FourBets.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace backend.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220621185641_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.6");

            modelBuilder.Entity("FourBets.Models.Bet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<uint>("BetGuestGoal")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BetHomeGoal")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("FourBets.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("FourBets.Models.GroupType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GroupTypes");
                });

            modelBuilder.Entity("FourBets.Models.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("GuestId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("HomeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ResultId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("HomeId");

                    b.HasIndex("ResultId");

                    b.HasIndex("UserId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Matchs");
                });

            modelBuilder.Entity("FourBets.Models.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("FourBets.Models.Result", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<uint>("GuestGoal")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("HomeGoal")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("FourBets.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FourBets.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NickName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cdccea2b-0452-4672-a695-a4f9f2884418"),
                            Email = "test@gmail.com",
                            IsBlocked = false,
                            NickName = "test",
                            Password = "$2a$12$JfLmgP1t4gLTMh9D6gdKB.r9bkobfE42a3j8M3jdz8WAey2ikMwnu",
                            Rating = 0u,
                            RoleId = new Guid("9e3d2d63-3669-4897-8f57-c98e5df0123f")
                        });
                });

            modelBuilder.Entity("FourBets.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e3d2d63-3669-4897-8f57-c98e5df0123f"),
                            Name = "user"
                        },
                        new
                        {
                            Id = new Guid("7075299d-1baa-477f-89e9-21e1e6216d7b"),
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("FourBets.Models.Bet", b =>
                {
                    b.HasOne("FourBets.Models.Group", null)
                        .WithMany("Bets")
                        .HasForeignKey("GroupId");

                    b.HasOne("FourBets.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FourBets.Models.Group", b =>
                {
                    b.HasOne("FourBets.Models.GroupType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("FourBets.Models.Match", b =>
                {
                    b.HasOne("FourBets.Models.Team", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId");

                    b.HasOne("FourBets.Models.Team", "Home")
                        .WithMany()
                        .HasForeignKey("HomeId");

                    b.HasOne("FourBets.Models.Result", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");

                    b.HasOne("FourBets.Models.User", null)
                        .WithMany("HistoryOfMatchs")
                        .HasForeignKey("UserId");

                    b.HasOne("FourBets.Models.Team", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId");

                    b.Navigation("Guest");

                    b.Navigation("Home");

                    b.Navigation("Result");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("FourBets.Models.Team", b =>
                {
                    b.HasOne("FourBets.Models.User", null)
                        .WithMany("FavouriteTeams")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FourBets.Models.User", b =>
                {
                    b.HasOne("FourBets.Models.Group", null)
                        .WithMany("Users")
                        .HasForeignKey("GroupId");

                    b.HasOne("FourBets.Models.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FourBets.Models.Group", b =>
                {
                    b.Navigation("Bets");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FourBets.Models.User", b =>
                {
                    b.Navigation("FavouriteTeams");

                    b.Navigation("HistoryOfMatchs");
                });
#pragma warning restore 612, 618
        }
    }
}
